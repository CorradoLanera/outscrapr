[{"path":[]},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement Corrado.Lanera@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://corradolanera.github.io/outscrapr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://corradolanera.github.io/outscrapr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 CorradoLanera Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://corradolanera.github.io/outscrapr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Corrado Lanera. Author, maintainer.","code":""},{"path":"https://corradolanera.github.io/outscrapr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lanera C (2024). outscrapr: Unofficial Uncompleted Outscraper API. R package version 0.0.2, https://corradolanera.github.io/outscrapr/.","code":"@Manual{,   title = {outscrapr: Unofficial Uncompleted Outscraper API},   author = {Corrado Lanera},   year = {2024},   note = {R package version 0.0.2},   url = {https://corradolanera.github.io/outscrapr/}, }"},{"path":"https://corradolanera.github.io/outscrapr/index.html","id":"outscrapr","dir":"","previous_headings":"","what":"Unofficial Uncompleted Outscraper API","title":"Unofficial Uncompleted Outscraper API","text":"goal outscrapr implement simplified subset Outscraper API R.","code":""},{"path":"https://corradolanera.github.io/outscrapr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Unofficial Uncompleted Outscraper API","text":"can install development version outscrapr like :","code":"devtools::install_github(\"CorradoLanera/outscrapr\")"},{"path":[]},{"path":"https://corradolanera.github.io/outscrapr/index.html","id":"single-query","dir":"","previous_headings":"Places","what":"Single query","title":"Unofficial Uncompleted Outscraper API","text":"","code":"library(outscrapr)  # Get your API key from https://outscraper.com/ and set it as the # environment variable `OUTSCRAPER_API_KEY` query <- \"restaurants, Brooklyn 11203\"  restaurants <- google_maps_search(query = query, limit = 2) restaurants |>    tibble::as_tibble() #> # A tibble: 2 × 58 #>   query     name  name_for_emails place_id google_id full_address borough street #>   <chr>     <chr> <chr>           <chr>    <chr>     <chr>        <chr>   <chr>  #> 1 restaura… LILL… Lilli Restaura… ChIJU4x… 0x89c25d… 1344 Utica … East F… 1344 … #> 2 restaura… Irie… Irie Bliss Res… ChIJJ8K… 0x89c25b… 3916 Church… Little… 3916 … #> # ℹ 50 more variables: postal_code <chr>, area_service <lgl>, #> #   country_code <chr>, country <chr>, city <chr>, us_state <chr>, state <chr>, #> #   plus_code <lgl>, latitude <dbl>, longitude <dbl>, h3 <chr>, #> #   time_zone <chr>, popular_times <lgl>, site <chr>, phone <chr>, type <chr>, #> #   logo <chr>, description <lgl>, typical_time_spent <lgl>, located_in <lgl>, #> #   located_google_id <lgl>, category <chr>, subtypes <chr>, posts <lgl>, #> #   reviews_tags <lgl>, rating <dbl>, reviews <int>, photos_count <int>, …  restaurants$working_hours #>   Monday   Tuesday Wednesday  Thursday   Friday  Saturday   Sunday #> 1 4-10PM    4-10PM    4-10PM    4-10PM  4PM-1AM  12PM-1AM  12-10PM #> 2 Closed 10AM-10PM 10AM-10PM 10AM-10PM 8AM-10PM 10AM-10PM 10AM-6PM restaurants$about |>    tibble::as_tibble() #> # A tibble: 2 × 12 #>   `Service options`$`Curbside pickup` Highlights$Fast serv…¹ `Popular for`$Lunch #>   <lgl>                               <lgl>                  <lgl>               #> 1 TRUE                                TRUE                   TRUE                #> 2 TRUE                                NA                     TRUE                #> # ℹ abbreviated name: ¹​Highlights$`Fast service` #> # ℹ 16 more variables: `Service options`$`No-contact delivery` <lgl>, #> #   $Takeout <lgl>, $`Dine-in` <lgl>, $Delivery <lgl>, #> #   `Popular for`$Dinner <lgl>, $`Solo dining` <lgl>, $Breakfast <lgl>, #> #   Accessibility <df[,1]>, Offerings <df[,11]>, `Dining options` <df[,8]>, #> #   Amenities <df[,2]>, Atmosphere <df[,3]>, Crowd <df[,1]>, Planning <df[,1]>, #> #   Payments <df[,3]>, Parking <df[,2]>  restaurants$about$`Popular for` #>   Lunch Dinner Solo dining Breakfast #> 1  TRUE   TRUE        TRUE        NA #> 2  TRUE   TRUE        TRUE      TRUE restaurants$reviews_per_score #>    1 2 3  4   5 #> 1 10 6 6 20 215 #> 2  0 0 0  1  28"},{"path":"https://corradolanera.github.io/outscrapr/index.html","id":"multiple-queries","dir":"","previous_headings":"Places","what":"Multiple queries","title":"Unofficial Uncompleted Outscraper API","text":"can retrieve max 500 places per one query search Google Maps. densely populated areas might want split query subqueries order get places inside. (e.g., c(\"restaurants, Brooklyn 11211\", \"restaurants, Brooklyn 11215\")).","code":"queries <- c(   \"restaurants, Brooklyn 11211\",   \"restaurants, Brooklyn 11215\" )  # Results' limit refers to the number of places to retrieve for each # query. The results of all queries are combined into a single tibble. multi_restaurants <- google_maps_search(query = queries, limit = 2) multi_restaurants |>    tibble::as_tibble() #> # A tibble: 4 × 58 #>   query     name  name_for_emails place_id google_id full_address borough street #>   <chr>     <chr> <chr>           <chr>    <chr>     <chr>        <chr>   <chr>  #> 1 restaura… The … The Commodore   ChIJpwY… 0x89c259… 366 Metropo… Willia… 366 M… #> 2 restaura… Lilia Lilia           ChIJJXC… 0x89c259… 567 Union A… Willia… 567 U… #> 3 restaura… Chela Chela           ChIJ3Vk… 0x89c25a… 408 5th Ave… Park S… 408 5… #> 4 restaura… The … The Common Par… ChIJR-z… 0x89c25b… 548 4th Ave… Gowanus 548 4… #> # ℹ 50 more variables: postal_code <chr>, area_service <lgl>, #> #   country_code <chr>, country <chr>, city <chr>, us_state <chr>, state <chr>, #> #   plus_code <lgl>, latitude <dbl>, longitude <dbl>, h3 <chr>, #> #   time_zone <chr>, popular_times <lgl>, site <chr>, phone <chr>, type <chr>, #> #   logo <chr>, description <chr>, typical_time_spent <lgl>, located_in <lgl>, #> #   located_google_id <lgl>, category <chr>, subtypes <chr>, posts <lgl>, #> #   reviews_tags <lgl>, rating <dbl>, reviews <int>, photos_count <int>, …  multi_restaurants$working_hours #>          Sunday        Monday                Tuesday              Wednesday #> 1      11AM-4AM       4PM-4AM                4PM-4AM                4PM-4AM #> 2      4-9:30PM      5-9:30PM               5-9:30PM               5-9:30PM #> 3     11AM-10PM       12-10PM                12-10PM                12-10PM #> 4 8:30AM-3:30PM 8:30AM-3:30PM 8:30AM-3:30PM,5-9:30PM 8:30AM-3:30PM,5-9:30PM #>        Thursday                 Friday      Saturday #> 1       4PM-4AM                4PM-4AM      11AM-4AM #> 2      5-9:30PM               4-9:30PM      4-9:30PM #> 3       12-10PM                12-11PM     11AM-11PM #> 4 8:30AM-3:30PM 8:30AM-3:30PM,5-9:30PM 8:30AM-3:30PM multi_restaurants$about |>    tibble::as_tibble() #> # A tibble: 4 × 15 #>   Service options$Outdoor…¹ $Delivery Highlights$Fast serv…² `Popular for`$Lunch #>   <lgl>                     <lgl>     <lgl>                  <lgl>               #> 1 TRUE                      TRUE      TRUE                   TRUE                #> 2 TRUE                      FALSE     NA                     TRUE                #> 3 TRUE                      TRUE      TRUE                   TRUE                #> 4 NA                        TRUE      TRUE                   TRUE                #> # ℹ abbreviated names: ¹​`Service options`$`Outdoor seating`, #> #   ²​Highlights$`Fast service` #> # ℹ 22 more variables: `Service options`$Takeout <lgl>, $`Dine-in` <lgl>, #> #   $`Curbside pickup` <lgl>, $`No-contact delivery` <lgl>, #> #   Highlights$`Great coffee` <lgl>, $`Great dessert` <lgl>, #> #   $`Live music` <lgl>, `Popular for`$Dinner <lgl>, $`Solo dining` <lgl>, #> #   $Breakfast <lgl>, Accessibility <df[,4]>, Offerings <df[,14]>, …  multi_restaurants$about$Highlights #>   Fast service Great coffee Great dessert Live music #> 1         TRUE           NA            NA         NA #> 2           NA         TRUE          TRUE         NA #> 3         TRUE           NA            NA       TRUE #> 4         TRUE         TRUE            NA         NA multi_restaurants$reviews_per_score #>     1  2   3   4    5 #> 1  67 35  57 292  807 #> 2 117 62 161 274 1228 #> 3  30 32  67 171  857 #> 4   1  0   4   5  112"},{"path":"https://corradolanera.github.io/outscrapr/index.html","id":"reviews","dir":"","previous_headings":"","what":"Reviews","title":"Unofficial Uncompleted Outscraper API","text":"","code":"library(outscrapr)  # Get your API key from https://outscraper.com/ and set it as the # environment variable `OUTSCRAPER_API_KEY` query <- \"restaurants, Brooklyn 11203\"  restaurant <- google_maps_search(query = query, limit = 1) restaurant |>    tibble::as_tibble() #> # A tibble: 1 × 58 #>   query     name  name_for_emails place_id google_id full_address borough street #>   <chr>     <chr> <chr>           <chr>    <chr>     <chr>        <chr>   <chr>  #> 1 restaura… LILL… Lilli Restaura… ChIJU4x… 0x89c25d… 1344 Utica … East F… 1344 … #> # ℹ 50 more variables: postal_code <chr>, area_service <lgl>, #> #   country_code <chr>, country <chr>, city <chr>, us_state <chr>, state <chr>, #> #   plus_code <lgl>, latitude <dbl>, longitude <dbl>, h3 <chr>, #> #   time_zone <chr>, popular_times <lgl>, site <chr>, phone <chr>, type <chr>, #> #   logo <chr>, description <lgl>, typical_time_spent <lgl>, located_in <lgl>, #> #   located_google_id <lgl>, category <chr>, subtypes <chr>, posts <lgl>, #> #   reviews_tags <lgl>, rating <dbl>, reviews <int>, photos_count <int>, …  reviews <- restaurant[[\"place_id\"]] |>    google_maps_reviews(reviews_limit = 2)  reviews |>    tibble::as_tibble() #> # A tibble: 1 × 64 #>   query     name  name_for_emails place_id google_id full_address borough street #>   <chr>     <chr> <chr>           <chr>    <chr>     <chr>        <chr>   <chr>  #> 1 ChIJU4xg… LILL… Lilli Restaura… ChIJU4x… 0x89c25d… 1344 Utica … East F… 1344 … #> # ℹ 56 more variables: postal_code <chr>, area_service <lgl>, #> #   country_code <chr>, country <chr>, city <chr>, us_state <chr>, state <chr>, #> #   plus_code <chr>, latitude <dbl>, longitude <dbl>, h3 <chr>, #> #   time_zone <chr>, popular_times <list>, site <chr>, phone <chr>, type <chr>, #> #   logo <chr>, description <lgl>, typical_time_spent <chr>, located_in <lgl>, #> #   located_google_id <lgl>, category <chr>, subtypes <chr>, posts <lgl>, #> #   reviews_tags <list>, rating <dbl>, reviews <int>, reviews_data <list>, …  identical(reviews$place_id, restaurant$place_id) #> [1] TRUE  reviews$reviews |>    tibble::as_tibble() #> # A tibble: 1 × 1 #>   value #>   <int> #> 1   257  reviews$reviews_data[[1]] |>    tibble::as_tibble() #> # A tibble: 2 × 23 #>   google_id    review_id review_pagination_id author_link author_title author_id #>   <chr>        <chr>     <chr>                <chr>       <chr>        <chr>     #> 1 0x89c25db3d… ChdDSUhN… CAESY0NBRVFBUnBFUTJ… https://ww… samuel lyght 11508292… #> 2 0x89c25db3d… ChZDSUhN… CAESY0NBRVFBaHBFUTJ… https://ww… Najuma Burke 10067722… #> # ℹ 17 more variables: author_image <chr>, author_reviews_count <int>, #> #   author_ratings_count <int>, review_text <chr>, review_img_urls <list>, #> #   review_img_url <chr>, review_questions <df[,6]>, review_photo_ids <list>, #> #   owner_answer <chr>, owner_answer_timestamp <int>, #> #   owner_answer_timestamp_datetime_utc <chr>, review_link <chr>, #> #   review_rating <int>, review_timestamp <int>, review_datetime_utc <chr>, #> #   review_likes <int>, reviews_id <chr>  reviews$reviews_data[[1]]$review_text #> [1] \"The appetizers were delicious, the ambiance was pleasant, and the drinks were excellent. However, it was a little on the expensive side. The new waitress was outstanding. Despite her slow service and lack of menu knowledge, I ordered the snapper, which was well-seasoned but not particularly tasty. The fried rice was slightly salty.\"                                                                                                                                                               #> [2] \"From the time we entered things were pleasant. We were met with a smile and greetings. The staff were accommodating and work well together. The drinks made by Simone were 10/10. They were smooth and the flavors well balanced. Our server Mimi was amazing and attentive and and overall sweetheart. I’ll be requesting her again. Big up to the chef because the food was finger licking good. Chef Omar knows what he is doing with his flavors… 10/10. We had no complaints we. We will be on repeat.\"  reviews$reviews_data[[1]]$review_questions #>   Service Meal type Price per person Food Atmosphere Recommended dishes #> 1       3    Brunch          $50–100    4          4                 NA #> 2       5    Brunch          $50–100    5          5                 NA reviews$reviews_data[[1]]$owner_answer #> [1] \"Hi Samuel \\n\\nThank you so much for the great feedback! Guest experience is very important to us and we strive to make this restaurant a place that everyone can enjoy! We are happy you had a good time and we hope to see you again. \\n\\n\" #> [2] NA"},{"path":"https://corradolanera.github.io/outscrapr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Unofficial Uncompleted Outscraper API","text":"Please note outscrapr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_reviews.html","id":null,"dir":"Reference","previous_headings":"","what":"Google Maps Reviews — google_maps_reviews","title":"Google Maps Reviews — google_maps_reviews","text":"Returns Google Maps reviews places using search queries (e.g., \"restaurants, Manhattan, NY, USA\") single place using Google IDs names (e.g., \"NoMad Restaurant, NY, USA\", \"0x886916e8bc273979:0x5141fcb11460b226\"). addition reviews, returns places information.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_reviews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Google Maps Reviews — google_maps_reviews","text":"","code":"google_maps_reviews(   query,   reviews_limit = 10,   reviews_query = NULL,   limit = 1,   sort = c(\"most_relevant\", \"newest\", \"highest_rating\", \"lowest_rating\"),   last_pagination_id = NULL,   start = NULL,   cutoff = NULL,   cutoff_rating = NULL,   ignore_empty = TRUE,   language = \"en\",   region = NULL,   fields = NULL,   async = FALSE,   ui = FALSE,   webhook = NULL,   api_key = Sys.getenv(\"OUTSCRAPER_API_KEY\") )"},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_reviews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Google Maps Reviews — google_maps_reviews","text":"query (chr) query want search. can use anything use regular Google Maps site. Additionally, can use google_id (feature_id), place_id, CID. reviews_limit (int, default = 10) parameter specifies limit reviews get one place (0 = unlimited). reviews_query (chr) parameter specifies query search among reviews (e.g. wow, amazing | great). limit (int, default = 10) parameter specifies limit organizations take one query search. sort (chr, default = \"most_relevant\") one sorting types: \"most_relevant\", \"newest\", \"highest_rating\", \"lowest_rating\". last_pagination_id (chr) review_pagination_id last item. commonly used pagination. start (int) start timestamp value reviews (newest review). current timestamp used value provided. Using start parameter overwrites sort parameter newest. Therefore, latest reviews beginning. cutoff (int) oldest timestamp value reviews (oldest review). Using cutoff parameter overwrites sort parameter newest. Therefore, latest reviews beginning. cutoff_rating (int) maximum lowest_rating sorting minimum highest_rating sorting rating reviews. Using cutoff_rating requires sorting set lowest_rating highest_rating. ignore_empty (lgl, default = TRUE) whether ignore reviews without text . language (chr, default = \"en\") language use website. region (chr, default = NULL) country use website. recommended use better search experience. fields (chr) fields want include item returned response. default, returns fields. Use &fields=query,name return specific ones. async (lgl, default = FALSE) parameter defines way want submit task Outscraper. can set FALSE open HTTP connection keep open got results, TRUE just submit requests Outscraper retrieve later (usually within 1-3 minutes) Request Results endpoint. response available 2 hours request completed. ui (lgl, default = FALSE) whether task executed UI task. commonly used want create regular platform task API. Using parameter overwrites async parameter true. webhook (chr, default = NULL) defines URL address (callback) Outscraper create 57POST request JSON body task/request finished. Using parameter overwrites webhook integrations. api_key (chr, default = Sys.getenv(\"OUTSCRAPER_API_KEY\")) API key. can get registering Outscraper.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_reviews.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Google Maps Reviews — google_maps_reviews","text":"tibble reviews Google Maps based given search query (many queries).","code":""},{"path":[]},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_reviews.html","id":"queries","dir":"Reference","previous_headings":"","what":"Queries","title":"Google Maps Reviews — google_maps_reviews","text":"example valid queries: Real estate agency, Rome, Italy NoMad Restaurant, NY, USA restaurants, Brooklyn 11203 0x886916e8bc273979:0x5141fcb11460b226 ChIJrZhup4lZwokRUr_5sLoFlDw etc. supports batching sending arrays 250 queries (e.g., query=text1&query=text2&query=text3). allows multiple queries sent one request save network latency time. might want check web application play locations categories suggest.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_reviews.html","id":"async","dir":"Reference","previous_headings":"","what":"Async","title":"Google Maps Reviews — google_maps_reviews","text":"good practice send async requests start checking results estimated execution time. Check Python implementation example. requests take time executed async = TRUE option preferred avoid HTTP requests timeouts.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_reviews.html","id":"optimization","dir":"Reference","previous_headings":"","what":"Optimization","title":"Google Maps Reviews — google_maps_reviews","text":"case reviews found search criteria, search request consume usage one review. endpoint optimized fast responses can used real-time API. Set reviewsLimit parameter 10 achieve maximum response speed.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_reviews.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Google Maps Reviews — google_maps_reviews","text":"","code":"if (FALSE) {   # single   google_maps_search(\"pizzeria, New York\", limit = 1)[[\"place_id\"]] |>     google_maps_reviews(reviews_limit = 2) |>     dplyr::pull(\"reviews_data\") |>     purrr::pluck(1) |>     dplyr::select(review_text) }"},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Google Maps Search — google_maps_search","title":"Google Maps Search — google_maps_search","text":"Search places Google Maps based given query (many queries).","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Google Maps Search — google_maps_search","text":"","code":"google_maps_search(   query,   limit = 10,   drop_duplicates = FALSE,   coordinates = NULL,   skip_places = 0,   language = \"en\",   region = NULL,   async = FALSE,   api_key = Sys.getenv(\"OUTSCRAPER_API_KEY\") )"},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Google Maps Search — google_maps_search","text":"query (chr) query want search. can use anything use regular Google Maps site. Additionally, can use google_id (feature_id), place_id, CID. limit (int, default = 10) parameter specifies limit organizations take one query search. drop_duplicates (lgl, default = FALSE) parameter specifies whether bot drop organizations different queries. makes sense use batching send multiple queries inside one request. coordinates (chr) parameter defines coordinates location want query applied. constructed next sequence: paste0(latitude, \", \", longitude), e.g. \"(41.3954381,2.1628662)\". Often, can find value visiting Google Maps. skip_places (int) Skip first N places, N multiple 20 (e.g. 0, 20, 40). commonly used pagination. language (chr, default = \"en\") language use website. region (chr, default = NULL) country use website. recommended use better search experience. async (lgl, default = FALSE) parameter defines way want submit task Outscraper. can set FALSE open HTTP connection keep open got results, TRUE just submit requests Outscraper retrieve later (usually within 1-3 minutes) Request Results endpoint. response available 2 hours request completed. api_key (chr, default = Sys.getenv(\"OUTSCRAPER_API_KEY\")) API key. can get registering Outscraper.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Google Maps Search — google_maps_search","text":"tibble places Google Maps row, based given search query (many queries).","code":""},{"path":[]},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"queries","dir":"Reference","previous_headings":"","what":"Queries","title":"Google Maps Search — google_maps_search","text":"example valid queries: Real estate agency, Rome, Italy NoMad Restaurant, NY, USA restaurants, Brooklyn 11203 0x886916e8bc273979:0x5141fcb11460b226 ChIJrZhup4lZwokRUr_5sLoFlDw etc. supports batching sending arrays 250 queries (e.g., query=text1&query=text2&query=text3). allows multiple queries sent one request save network latency time. might want check web application play locations categories suggest.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"limit","dir":"Reference","previous_headings":"","what":"Limit","title":"Google Maps Search — google_maps_search","text":"500 places per one query search Google Maps. densely populated areas might want split query subqueries order get places inside. (e.g., c(\"restaurants, Brooklyn 11211\", \"restaurants, Brooklyn 11215\")).","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"drop-duplicates","dir":"Reference","previous_headings":"","what":"Drop duplicates","title":"Google Maps Search — google_maps_search","text":"TRUE bot combines results query inside one big array ({'data': [...]} instead {'data': [[...], [...], [...]]}). amount ignored rows less 5,000% actually extracted, billed ignored records. Anyway, results google_map_search always single tibble places.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"async","dir":"Reference","previous_headings":"","what":"Async","title":"Google Maps Search — google_maps_search","text":"good practice send async requests start checking results estimated execution time. Check Python implementation example. requests take time executed async = TRUE option preferred avoid HTTP requests timeouts.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"results","dir":"Reference","previous_headings":"","what":"Results","title":"Google Maps Search — google_maps_search","text":"results searches see visiting regular Google Maps site. However, cases, important use locations inside queries (e.g., bars, NY, USA) IP addresses Outscraper's servers might located different countries.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"optimization","dir":"Reference","previous_headings":"","what":"Optimization","title":"Google Maps Search — google_maps_search","text":"case places found search criteria, search request consume usage one place. endpoint optimized fast responses can used real-time API. Set limit parameter 10 achieve maximum response speed.","code":""},{"path":"https://corradolanera.github.io/outscrapr/reference/google_maps_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Google Maps Search — google_maps_search","text":"","code":"if (FALSE) {   # single   google_maps_search(\"pizzeria, New York\", limit = 1)    # multiple   google_maps_search(     c(\"pizzeria, New York\", \"pizzeria, Chicago\"),     limit = 1  # each query will return 2 places max   ) }"},{"path":"https://corradolanera.github.io/outscrapr/reference/outscrapr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"outscrapr: Unofficial Uncompleted Outscraper API — outscrapr-package","title":"outscrapr: Unofficial Uncompleted Outscraper API — outscrapr-package","text":"simplified versions [Outscraper](https://outscraper.com/) API endpoints.","code":""},{"path":[]},{"path":"https://corradolanera.github.io/outscrapr/reference/outscrapr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"outscrapr: Unofficial Uncompleted Outscraper API — outscrapr-package","text":"Maintainer: Corrado Lanera corrado.lanera@ubep.unipd.(ORCID)","code":""},{"path":"https://corradolanera.github.io/outscrapr/news/index.html","id":"outscrapr-002","dir":"Changelog","previous_headings":"","what":"outscrapr 0.0.2","title":"outscrapr 0.0.2","text":"Added google_maps_reviews function.","code":""},{"path":"https://corradolanera.github.io/outscrapr/news/index.html","id":"outscrapr-001","dir":"Changelog","previous_headings":"","what":"outscrapr 0.0.1","title":"outscrapr 0.0.1","text":"Added google_maps_search function. Added GH actions CI/CD pkgdown. Setup pkg development environment.","code":""}]
